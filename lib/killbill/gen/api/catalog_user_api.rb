#############################################################################################
#                                                                                           #
#                   Copyright 2010-2013 Ning, Inc.                                          #
#                   Copyright 2014 Groupon, Inc.                                            #
#                   Copyright 2014 The Billing Project, LLC                                 #
#                                                                                           #
#      The Billing Project licenses this file to you under the Apache License, version 2.0  #
#      (the "License"); you may not use this file except in compliance with the             #
#      License.  You may obtain a copy of the License at:                                   #
#                                                                                           #
#          http://www.apache.org/licenses/LICENSE-2.0                                       #
#                                                                                           #
#      Unless required by applicable law or agreed to in writing, software                  #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT            #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the            #
#      License for the specific language governing permissions and limitations              #
#      under the License.                                                                   #
#                                                                                           #
#############################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Api

      java_package 'org.killbill.billing.catalog.api'
      class CatalogUserApi

        include org.killbill.billing.catalog.api.CatalogUserApi

        def initialize(real_java_api)
          @real_java_api = real_java_api
        end


        java_signature 'Java::org.killbill.billing.catalog.api.Catalog getCatalog(Java::java.lang.String, Java::org.killbill.billing.util.callcontext.TenantContext)'
        def get_catalog(catalogName, context)

          # conversion for catalogName [type = java.lang.String]
          catalogName = catalogName.to_s unless catalogName.nil?

          # conversion for context [type = org.killbill.billing.util.callcontext.TenantContext]
          context = context.to_java unless context.nil?
          begin
            res = @real_java_api.get_catalog(catalogName, context)
            # conversion for res [type = org.killbill.billing.catalog.api.Catalog]
            res = Killbill::Plugin::Model::Catalog.new.to_ruby(res) unless res.nil?
            return res
          rescue Java::org.killbill.billing.catalog.api.CatalogApiException => e
            raise Killbill::Plugin::Model::CatalogApiException.new.to_ruby(e)
          end
        end

        java_signature 'Java::org.killbill.billing.catalog.api.StaticCatalog getCurrentCatalog(Java::java.lang.String, Java::org.killbill.billing.util.callcontext.TenantContext)'
        def get_current_catalog(catalogName, context)

          # conversion for catalogName [type = java.lang.String]
          catalogName = catalogName.to_s unless catalogName.nil?

          # conversion for context [type = org.killbill.billing.util.callcontext.TenantContext]
          context = context.to_java unless context.nil?
          begin
            res = @real_java_api.get_current_catalog(catalogName, context)
            # conversion for res [type = org.killbill.billing.catalog.api.StaticCatalog]
            res = Killbill::Plugin::Model::StaticCatalog.new.to_ruby(res) unless res.nil?
            return res
          rescue Java::org.killbill.billing.catalog.api.CatalogApiException => e
            raise Killbill::Plugin::Model::CatalogApiException.new.to_ruby(e)
          end
        end

        java_signature 'Java::void uploadCatalog(Java::java.lang.String, Java::org.killbill.billing.util.callcontext.CallContext)'
        def upload_catalog(catalogXML, context)

          # conversion for catalogXML [type = java.lang.String]
          catalogXML = catalogXML.to_s unless catalogXML.nil?

          # conversion for context [type = org.killbill.billing.util.callcontext.CallContext]
          context = context.to_java unless context.nil?
          @real_java_api.upload_catalog(catalogXML, context)
        end

        java_signature 'Java::void createDefaultEmptyCatalog(Java::org.joda.time.DateTime, Java::org.killbill.billing.util.callcontext.CallContext)'
        def create_default_empty_catalog(effectiveDate, callContext)

          # conversion for effectiveDate [type = org.joda.time.DateTime]
          if !effectiveDate.nil?
            effectiveDate =  (effectiveDate.kind_of? Time) ? DateTime.parse(effectiveDate.to_s) : effectiveDate
            effectiveDate = Java::org.joda.time.DateTime.new(effectiveDate.to_s, Java::org.joda.time.DateTimeZone::UTC)
          end

          # conversion for callContext [type = org.killbill.billing.util.callcontext.CallContext]
          callContext = callContext.to_java unless callContext.nil?
          @real_java_api.create_default_empty_catalog(effectiveDate, callContext)
        end

        java_signature 'Java::void addSimplePlan(Java::org.killbill.billing.catalog.api.SimplePlanDescriptor, Java::org.joda.time.DateTime, Java::org.killbill.billing.util.callcontext.CallContext)'
        def add_simple_plan(planDescriptor, requestedDate, context)

          # conversion for planDescriptor [type = org.killbill.billing.catalog.api.SimplePlanDescriptor]
          planDescriptor = planDescriptor.to_java unless planDescriptor.nil?

          # conversion for requestedDate [type = org.joda.time.DateTime]
          if !requestedDate.nil?
            requestedDate =  (requestedDate.kind_of? Time) ? DateTime.parse(requestedDate.to_s) : requestedDate
            requestedDate = Java::org.joda.time.DateTime.new(requestedDate.to_s, Java::org.joda.time.DateTimeZone::UTC)
          end

          # conversion for context [type = org.killbill.billing.util.callcontext.CallContext]
          context = context.to_java unless context.nil?
          @real_java_api.add_simple_plan(planDescriptor, requestedDate, context)
        end

        java_signature 'Java::void deleteCatalog(Java::org.killbill.billing.util.callcontext.CallContext)'
        def delete_catalog(callContext)

          # conversion for callContext [type = org.killbill.billing.util.callcontext.CallContext]
          callContext = callContext.to_java unless callContext.nil?
          @real_java_api.delete_catalog(callContext)
        end
      end
    end
  end
end
